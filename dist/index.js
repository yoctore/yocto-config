/* yocto-config - A simple config manager for node app - V3.0.1 */

"use strict";var path=require("path"),_=require("lodash"),logger=require("yocto-logger"),joi=require("joi"),fs=require("fs"),glob=require("glob"),utils=require("yocto-utils"),Q=require("q"),schema=require("./schema");function Config(e){this.config={},this.state=!1,this.env=process.env.NODE_ENV||"development",this.base=process.cwd(),this.logger=e,this.suffix=process.env.CONFIG_SUFFIX_PATH||"",this.schemaList={express:schema.getExpress(),mongoose:schema.getMongoose(),passportJs:schema.getPassportJs(),render:schema.getRender(),router:schema.getRouter()},this.schema={}}Config.prototype.find=function(e,i){this.logger.debug(["[ Config.find ] - Try to enable config for",e].join(" "));var o=_.has(this.schemaList,e);if(o){o=this.schemaList[e];var t=_.set({},e,o);return"express"===e&&_.has(t,"express")&&(t=t.express),"mongoose"!==e&&"sequelize"!==e||(t={db:t[e]}),_.isBoolean(i)&&i?_.merge(this.schema,t):this.schema=t,this.logger.info(["[ Config.find ] -",e,"config was correcty activated."].join(" ")),!0}return!1},Config.prototype.enableExpress=function(e){return this.enableSchema("express",e)},Config.prototype.enableRender=function(e){return this.enableSchema("render",e)},Config.prototype.enableRouter=function(e){return this.enableSchema("router",e)},Config.prototype.enableMongoose=function(e){return this.enableSchema("mongoose",e)},Config.prototype.enablePassportJs=function(e){return this.enableSchema("passportJs",e)},Config.prototype.enableSchema=function(e,i){return i=!!_.isBoolean(i)&&i,this.find(e,i)},Config.prototype.addCustomSchema=function(e,i,o,t){return _.has(this.schemaList,e)||!_.isObject(i)?(this.logger.error(["[ Config.addCustomerSchema ] - Cannot add new custom schema. Schema :",e,"already exist, or given value is invalid."].join(" ")),!1):(_.extend(this.schemaList,_.set({},e,i)),_.isBoolean(o)&&o?this.enableSchema(e,t):_.has(this.schemaList,e))},Config.prototype.set=function(e,i){return _.isUndefined(e)||!_.isString(e)||_.isEmpty(e)?(this.logger.warning(["[ Core.set ] - Invalid value given.","name must be a string and not empty. Operation aborted !"].join(" ")),!1):("base"===e&&(path.isAbsolute(i)||(i=path.normalize([process.cwd(),i].join("/")))),this[e]=i,!0)},Config.prototype.getConfig=function(){return this.get("config")},Config.prototype.setConfigPath=function(e){return this.set("base",e)},Config.prototype.get=function(e){return this[e]},Config.prototype.reload=function(e){return _.isString(e)&&!_.isEmpty(e)&&(this.base=e),this.load()},Config.prototype.loadPassport=function(){return this.load()},Config.prototype.autoEnableValidators=function(e){return!_.isArray(e)||_.isEmpty(e)?(this.logger.warning(["[ Config.autoEnableValidator ] - Cannot check items.","Is not an array or is empty."].join(" ")),!1):(_.each(e,function(e){_.has(this.schemaList,e)?this.enableSchema(e,!0)||this.logger.error(["[ Config.autoEnableValidator ] - Auto enable [",e,"] failed"].join(" ")):this.logger.warning(["[ Config.autoEnableValidator ] - Cannot enable [",e,"] schema does not exists"].join(" "))}.bind(this)),!0)},Config.prototype.load=function(){var e=Q.defer();try{var i={},o=path.normalize([this.base,this.suffix,"*.json"].join("/")),t=path.normalize([this.base,this.suffix,[this.env,".json"].join("")].join("/")),n=glob.sync(o);if(_.isEmpty(n))throw"No config files was found. Operation aborted !";n=_.sortBy(n,function(e){var i=path.normalize([this.base,this.suffix,"all.json"].join("/")),o=path.normalize([this.base,this.suffix,"common.json"].join("/")),t=path.normalize([this.base,this.suffix,"development.json"].join("/")),n=path.normalize([this.base,this.suffix,"staging.json"].join("/"));return[e===path.normalize([this.base,this.suffix,"production.json"].join("/")),e===n,e===t,e===o,e===i].join("||")}.bind(this)),_.each(n,function(e){var o=JSON.parse(fs.readFileSync(e,"utf-8"));return _.merge(i,o),t!==e}),this.schema=joi.object().required().keys(this.schema).unknown(!0);var s=joi.validate(i,this.schema,{abortEarly:!1});if(!_.isNull(s.error))throw _.each(s.error.details,function(e){this.logger.warning(["[ Config.load ] - Cannot update config an error occured. Error is :",utils.obj.inspect(e)].join(" "))}.bind(this)),"Config validation failed";_.each(i.directory,function(e){var i=_.first(_.values(e));path.isAbsolute(i)||(i=path.normalize([process.cwd(),i].join("/"))),this[[_.first(_.keys(e)),"directory"].join("_").toUpperCase()]=i}.bind(this)),this.state=!0,this.config=s.value,this.logger.info(["[ Config.load ] - Success - Config file was changed with files based on :",[this.base,this.suffix].join("/")].join(" ")),e.resolve(this.config)}catch(i){this.logger.error(["[ Config.load ] - an error occured during load config file. Error is :",i].join(" ")),e.reject(i)}return e.promise},module.exports=function(e){return(_.isUndefined(e)||_.isNull(e))&&(logger.warning("[ Config.constructor ] - Invalid logger given. Use internal logger"),e=logger),new Config(e)};